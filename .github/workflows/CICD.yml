
name: CICD pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  build:

    runs-on: self-hosted

    #installing java and copy whole code to the runner
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn package --file pom.xml

    #publishing the artifacts 
    - uses: actions/upload-artifact@v4
      with:
       name: my-artifact
       path: target/*.jar
    - name: Trivy FS Scan
      run: |
       trivy fs --format table -o trivy-fs-report.html .

    # Triggering SonarQube analysis as results of it are required by Quality Gate check.
    # - name: SonarQube Scan
    #   uses: sonarsource/sonarqube-scan-action@v3.0.0
    #   env:
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #     SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

    # - name: install jq
    #   run: sudo apt-get update && sudo apt-get install -y jq
    # # Check the Quality Gate status.
    # - name: SonarQube Quality Gate check
    #   id: sonarqube-quality-gate-check
    #   uses: sonarsource/sonarqube-quality-gate-action@master
    #   # Force to fail step after specific time.
    #   timeout-minutes: 5
    #   env:
    #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #    SONAR_HOST_URL: http://16.16.25.47:9000           #${{ secrets.SONAR_HOST_URL }} #OPTIONAL

      # build the docker image 
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build the imaeg
      run: |
        docker build -t neranjanhub/boardgame:latest .

     #scan the docker image
    - name: Trivy docker image scan 
      run: |
        trivy image --format table -o trivy-image-report.html neranjanhub/boardgame:latest

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: push the docker image
      run: |
        docker push neranjanhub/boardgame:latest


    # this is for deploy to the k8s by githubaction
    - name: Kubectl Action
      uses: tale/kubectl-action@v1
      with:
       base64-kube-config: ${{ secrets.KUBE_CONFIG }}
    - run: |
       kubectl apply -f deployment-service.yaml -n webapps
       kubectl get svc -n webapps
  
